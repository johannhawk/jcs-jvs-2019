document.getElementById("container").innerHTML = "<h1>Johann C Sigurdsson</h1>";

var newdiv = document.createElement("div");//gerir div element
newdiv.innerHTML = "<h2>Verkefni 5.1</h2><ol type='A'><li>Afhverju er getElementById() fljótleglegasta aðferðin?</li><li>Hvað er málið með auða hnúta (e. whitespace nodes) og DOM tréið?</li><li>Hvað er static og live NodeList, hver er munurinn á NodeList og HTMLCollection?  </li><li>Hvað er event í eftirfarandi kóða og hvað er gert með því?\n<pre><code>&#x3C;a href=&#x22;https://developer.mozilla.org/&#x22;&#x3E;MDN&#x3C;/a&#x3E;\n&#x3C;script&#x3E;\n   let link = document.querySelector(&#x22;a&#x22;);\n   link.addEventListener(&#x22;click&#x22;, event =&#x3E; {\n     console.log(&#x22;Nope.&#x22;);\n     event.preventDefault();\n   }); &#x3C;\n/script&#x3E; </code></pre></li><li>Af þremur leiðum til að binda event þá er AddEventListener() nýjust en afhverju er hún betri en hinar?</li><li>Hver er munurinn á true og false í AddEventListener? </li>\n<pre><code>elem.addEventListener(&#x22;click&#x22;, handlerFunction, true);\nelem.addEventListener(&#x22;click&#x22;, handlerFunction, false);</code></pre><li><i>this</i> vísar í Event listener á html element en ekki á object. Þú getur notað bind() til að breyta því, leystu eftirfarandi kóðadæmi með notkun á bind() til að birta í console “My name is Sam“ en ekki undefined.</li>\n<pre><code>let    Person = {\n  name: &#x27;Sam&#x27;,\n  sayName: function(){\n    console.log(&#x27;My name is &#x27;+ this.name);\n  }\n   };\n\n buttonEl.addEventListener(&#x27;click&#x27;, Person.sayName); </code></pre></ol><hr><ol type='a'><li>leitar bara að einu mjög nákvæma element eftir því hvada id það hefur i HTML skjalinu og gerir ekkert annað sem getur hægt á því <br> þetta hugar líka um hvort það sé case sensitive</li><li>auða hnúta(AKA whitespace) fyrir utan tags teljast sem text nodes og eru sett inní DOM tréið sem getur gert það erfitt að vinna með tréið án þess að whitespace nodes koma í veg fyrir vinnuna</li><li>NodeList er safn af &#x27;nodes&#x27; <br> Með static NodeList mun DOM tréið ekki uppfæra sig sjálfkrafa enn í live NodeList mun það uppfæra sig sjálfkrafa.<br> Static þýðir fast og Live þýðir lifandi svo það hjálpar <br> <br> NodeList og HTMLCollection eru bæði söfn af DOM nodes, enn NodeList getur haft hvaða tegund af node enn HTMLCollection heldur bara á node elements.Element er einhver sérstök tegund af node, eins og div, body, list og framvegis.<br>Yfirleit er NodeList meira 'vítt' og HTMLCollection meira 'nákvæmt'.</li><li>í HTML kóðann er <a> node með netfang<br> link = &#x27;a&#x27; <br> svo er event sem fylgist með ef netfangið fé músasmell <br> ef einhver smellur á netfangið þá mun console log skrifa &#x27;Nope&#x27; og stöðva það sem mundi annarsvegar gerast.<br> þá endar kóðinn.</li><li>-HTML Event Handler html onclick = &#x22;checkAnswer&#x22;; <br> aðal gallinn er að það fer í HTML kóða og helst ætti maður ekki að gera það   <br>- DOM Event Handlers exampleQuestion.onclick = checkAnswer; Gallinn við þennan er að það passar bara eitt function á hvert event handler<br>   - [new] Event Handler exampleQuestion.addEventListener(&#x22;click&#x22;, checkAnswer, false); það leyfir þig að hafa eins marga handlers og þú getur ekki óvart skipt út handler sem er löngu skráð kemur líka í veg fyrir conflict á milli falla sem bregðast við sama event</li><li>Boolean sem þú getur sett á true til að kveikja á useCapture, false ef til að ekki gera það, ef ekkert er merkt þá er það sett á false.<br>		dæmi: target.addEventListener(type, listener[, useCapture]);<br>þegar useCapture er true þá mun events fara í gegnum listener áður enn þau fara dýpra niður DOM tréið</li><li>þegar takkin á síðunni með &#x22;buttonE1&#x22; er ýtt þá fer allt þetta í gang<br>án bind mun functionid sem 'this' er að benda á það sem addEventListener sækir í staðinn fyrir Person<br><br>með bind þá mun 'this' verða fast á það sem bind er kringum í staðinn, í þessu tilviki ætti það að vera í kringum 'Person'</li></ol>"
document.body.appendChild(newdiv);//lokar div
var newbor = document.getElementsByTagName("div")[1].id = "bor";//gefur nytt id til naesta div element
document.getElementById("bor").style.border = "thick dashed #000000";

//newdiv.textContent = "textContent test";

//<ol type='A'><li>Afhverju er getElementById() fljótleglegasta aðferðin?</li><li>Hvað er málið með auða hnúta (e. whitespace nodes) og DOM tréið?</li><li>Hvað er static og live NodeList, hver er munurinn á NodeList og HTMLCollection?  </li><li>Hvað er event í eftirfarandi kóða og hvað er gert með því?\n<pre><code>&#x3C;a href=&#x22;https://developer.mozilla.org/&#x22;&#x3E;MDN&#x3C;/a&#x3E;\n&#x3C;script&#x3E;\n   let link = document.querySelector(&#x22;a&#x22;);\n   link.addEventListener(&#x22;click&#x22;, event =&#x3E; {\n     console.log(&#x22;Nope.&#x22;);\n     event.preventDefault();\n   }); &#x3C;\n/script&#x3E; </code></pre></li><li>Af þremur leiðum til að binda event þá er AddEventListener() nýjust en afhverju er hún betri en hinar?</li><li>Hver er munurinn á true og false í AddEventListener? </li>\n<pre><code>elem.addEventListener(&#x22;click&#x22;, handlerFunction, true);\nelem.addEventListener(&#x22;click&#x22;, handlerFunction, false);</code></pre><li><i>this</i> vísar í Event listener á html element en ekki á object. Þú getur notað bind() til að breyta því, leystu eftirfarandi kóðadæmi með notkun á bind() til að birta í console “My name is Sam“ en ekki undefined.</li>\n<pre><code>let    Person = {\n  name: &#x27;Sam&#x27;,\n  sayName: function(){\n    console.log(&#x27;My name is &#x27;+ this.name);\n  }\n   };\n\n buttonEl.addEventListener(&#x27;click&#x27;, Person.sayName); </code></pre></ol><hr><ol type='a'><li>leitar bara að einu mjög nákvæma element eftir því hvada id það hefur i HTML skjalinu og gerir ekkert annað sem getur hægt á því <br> þetta hugar líka um hvort það sé case sensitive</li><li>auða hnúta(AKA whitespace) fyrir utan tags teljast sem text nodes og eru sett inní DOM tréið sem getur gert það erfitt að vinna með tréið án þess að whitespace nodes koma í veg fyrir vinnuna</li><li>NodeList er safn af &#x27;nodes&#x27; <br> Með static NodeList mun DOM tréið ekki uppfæra sig sjálfkrafa enn í live NodeList mun það uppfæra sig sjálfkrafa.<br> Static þýðir fast og Live þýðir lifandi svo það hjálpar <br> <br> NodeList og HTMLCollection eru bæði söfn af DOM nodes, enn NodeList getur haft hvaða tegund af node enn HTMLCollection heldur bara á node elements.Element er einhver sérstök tegund af node, eins og div, body, list og framvegis.<br>Yfirleit er NodeList meira 'vítt' og HTMLCollection meira 'nákvæmt'.</li><li>í HTML kóðann er <a> node með netfang<br> link = &#x27;a&#x27; <br> svo er event sem fylgist með ef netfangið fé músasmell <br> ef einhver smellur á netfangið þá mun console log skrifa &#x27;Nope&#x27; og stöðva það sem mundi annarsvegar gerast.<br> þá endar kóðinn.</li><li>-HTML Event Handler html onclick = &#x22;checkAnswer&#x22;; <br> aðal gallinn er að það fer í HTML kóða og helst ætti maður ekki að gera það   <br>- DOM Event Handlers exampleQuestion.onclick = checkAnswer; Gallinn við þennan er að það passar bara eitt function á hvert event handler<br>   - [new] Event Handler exampleQuestion.addEventListener(&#x22;click&#x22;, checkAnswer, false); það leyfir þig að hafa eins marga handlers og þú getur ekki óvart skipt út handler sem er löngu skráð kemur líka í veg fyrir conflict á milli falla sem bregðast við sama event</li><li>Boolean sem þú getur sett á true til að kveikja á useCapture, false ef til að ekki gera það, ef ekkert er merkt þá er það sett á false.<br>		dæmi: target.addEventListener(type, listener[, useCapture]);<br>þegar useCapture er true þá mun events fara í gegnum listener áður enn þau fara dýpra niður DOM tréið</li><li>þegar takkin á síðunni með &#x22;buttonE1&#x22; er ýtt þá fer allt þetta í gang<br>án bind mun functionid sem 'this' er að benda á það sem addEventListener sækir í staðinn fyrir Person<br><br>með bind þá mun 'this' verða fast á það sem bind er kringum í staðinn, í þessu tilviki ætti það að vera í kringum 'Person'</li></ol>"
